# coding=utf-8

"""
@file linear_svm_cg.py_in

@brief Linear Support Vector Machine using Conjugate Gradient: Driver functions

@namespace linear_svm_cg

@brief Linear Support Vector Machine using Conjugate Gradient: Driver functions
"""

from utilities.control import IterationController

def compute_linear_svm_cg(schema_madlib, rel_args, rel_state, rel_source,
    col_ind_var, col_dep_var, **kwargs):
    """
    Driver function for Linear Support Vector Machine using Conjugate Gradient

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param col_ind_var Name of the independent variables column
    @param col_dep_var Name of the dependent variable column
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """
    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "DOUBLE PRECISION[]",
        truncAfterIteration = False,
        schema_madlib = schema_madlib, # Identifiers start here
        rel_source = rel_source,
        col_ind_var = col_ind_var,
        col_dep_var = col_dep_var,
        rel_internal = 'pg_temp._madlib_linear_svm_cg_internal')
    with iterationCtrl as it:
        it.iteration = 0
        it.runSQL("""
            DROP TABLE IF EXISTS {rel_internal};
            CREATE TEMP TABLE {rel_internal} (
                _iteration INTEGER PRIMARY KEY,
                _state DOUBLE PRECISION[],
                _stepsize DOUBLE PRECISION
            )
            """.format(
                temp = 'TEMPORARY' if it.temporaryTables else '',
                **it.kwargs))

        while True:
            # run cg to compute search direction and insert to a temp table
            it.runSQL("""
                INSERT INTO {rel_internal}
                SELECT {iteration},
                    (SELECT {schema_madlib}.linear_svm_cg_step(
                        (_src.{col_ind_var})::FLOAT8[],
                        (_src.{col_dep_var})::BOOLEAN,
                        (SELECT _state FROM {rel_state}
                            WHERE _iteration = {iteration}),
                        (_args.dimension)::INT4)
                        FROM {rel_source} AS _src, {rel_args} AS _args),
                    NULL
                """.format(iteration=it.iteration, **it.kwargs))

            it.runSQL("""
                UPDATE {rel_internal} SET _stepsize =
                    (SELECT {schema_madlib}.linear_svm_greedy_step_size(
                        (SELECT {schema_madlib}.linear_svm_best_ball_step(
                            (_src.{col_ind_var})::FLOAT8[],
                            (_src.{col_dep_var})::BOOLEAN,
                            (SELECT {schema_madlib}.linear_svm_cg_coef(_state)
                                FROM {rel_internal}
                                WHERE _iteration = {iteration}),
                            (SELECT {schema_madlib}.linear_svm_cg_direction(_state)
                                FROM {rel_internal}
                                WHERE _iteration = {iteration}),
                            (SELECT _args.stepsizes
                                FROM {rel_args} AS _args))
                            FROM {rel_source} AS _src),
                        (SELECT _args.stepsizes
                            FROM {rel_args} AS _args)))
                WHERE _iteration = {iteration}
                """.format(iteration=it.iteration, **it.kwargs))

            # use step size and update the model
            it.update("""
                SELECT {schema_madlib}.linear_svm_cg_update(
                    _state,
                    _stepsize)
                FROM {rel_internal}
                WHERE _iteration = {iteration}
                """)

            if it.test("""
                {iteration} > _args.num_iterations OR
                {schema_madlib}.internal_linear_svm_cg_distance(
                    (SELECT _state FROM {rel_state}
                        WHERE _iteration = {iteration} - 1),
                    (SELECT _state FROM {rel_state}
                        WHERE _iteration = {iteration})) < _args.tolerance
                """):
                break
    return iterationCtrl.iteration

